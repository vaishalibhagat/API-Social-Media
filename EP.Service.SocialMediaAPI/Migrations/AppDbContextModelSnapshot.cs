// <auto-generated />
using System;
using EP.Service.SocialMediaAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EP.Service.SocialMediaAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EP.Service.SocialMediaAPI.Model.Domain.ArchivedPost", b =>
                {
                    b.Property<Guid>("ArchivedPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ArchivedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("SocialMediaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("ArchivedPostId");

                    b.HasIndex("SocialMediaId");

                    b.HasIndex("UserId");

                    b.ToTable("ArchivedPosts");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CommentedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("SocialMediaId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("CommentId");

                    b.HasIndex("SocialMediaId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.CommentLike", b =>
                {
                    b.Property<Guid>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LikedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LikeId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("commentLike");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.Like", b =>
                {
                    b.Property<Guid>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LikedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("SocialMediaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LikeId");

                    b.HasIndex("SocialMediaId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.Reply", b =>
                {
                    b.Property<Guid>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RepliedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("ReplyId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.SavedPost", b =>
                {
                    b.Property<Guid>("SavedPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SavedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("SavedPostId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedPosts");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.Share", b =>
                {
                    b.Property<Guid>("ShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ShareableUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SharedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("SharedFromUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SharedToUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("ShareId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.SocialMedia", b =>
                {
                    b.Property<Guid>("SocialMediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("SocialMediaID");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.Model.Domain.ArchivedPost", b =>
                {
                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.SocialMedia", "SocialMedia")
                        .WithMany("ArchivedPosts")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMedia");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.Comment", b =>
                {
                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.SocialMedia", "SocialMedia")
                        .WithMany("Comments")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMedia");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.CommentLike", b =>
                {
                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.Like", b =>
                {
                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.SocialMedia", "SocialMedia")
                        .WithMany("Likes")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMedia");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.Reply", b =>
                {
                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.SavedPost", b =>
                {
                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.SocialMedia", "SocialMedia")
                        .WithMany("SavedPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.User", "User")
                        .WithMany("SavedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMedia");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.SocialMedia", b =>
                {
                    b.HasOne("EP.Service.SocialMediaAPI.model.Domain.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.SocialMedia", b =>
                {
                    b.Navigation("ArchivedPosts");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("SavedPosts");
                });

            modelBuilder.Entity("EP.Service.SocialMediaAPI.model.Domain.User", b =>
                {
                    b.Navigation("SavedPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
